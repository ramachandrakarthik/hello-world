imp_packages=function()
{
library("dplyr")
install.packages("dplyr")
library("plyr")
install.packages("plyr")
library("ggplot2")
install.packages("ggplot2")
library("ggthemes")
install.packages("ggthemes")
library("scales")
install.packages("scales")
library("psych")
install.packages("psych")
library("ROCR")
install.packages("ROCR")
library("party")
install.packages("party")
library("corrplot")
install.packages("corrplot")
library("moments")
install.packages("moments")
}
imp_packages()


####################################################################
####################################################################

#Creating a blank Data frame Springs_Data_Sample
Springs_Data_sample=data.frame(matrix(nrow = 18578,ncol = 8))
colnames(Springs_Data_sample)=c("Customer_ID","Customer_Age","Customer_Income","Customer_Income_Category","Car_Size_Cateogry","Service_Purchased","Amount_Paid","Payment_Type")
View(Springs_Data_sample)

####################################################################

#Adding unique customers and their ID
Springs_Data_sample[1:4157,1]=sample(1:4157, size = 4157, replace = FALSE)
Springs_Data_sample[,1]=Springs_Data_sample[order(Springs_Data_sample$Customer_ID),1]
View(Springs_Data_sample)

####################################################################

#Adding ages of the customers
Springs_Data_sample[1:4157,2]=sample(c(21:38,39:56,56:68), size = 4157, replace = TRUE)
hist(Springs_Data_sample$Customer_Age)
View(Springs_Data_sample)

####################################################################

#Skeweing Age
ageskew=Springs_Data_sample[sample(1:nrow(Springs_Data_sample), size = 3600, replace = FALSE),2]
length(ageskew)
ageskew_condition=ageskew[ageskew<35]
length(ageskew_condition)
for(m in 1:length(ageskew_condition))
{
  Springs_Data_sample[m,2]=round(rnorm(1, mean = 39, sd = 2))
}

length(Springs_Data_sample[Springs_Data_sample[,2]<21,2])
length(Springs_Data_sample[Springs_Data_sample[,2]>59,2])
for(l in 1:nrow(Springs_Data_sample))
{
  if(Springs_Data_sample[l,2]<21)
  {
    Springs_Data_sample[l,2]=round(rnorm(1, mean = 29, sd = 3))
  }
  else if(Springs_Data_sample[l,2]>59)
  {
    Springs_Data_sample[l,2]=round(rnorm(1, mean = 28, sd = 2))
  }
  else
    Springs_Data_sample[l,2]=Springs_Data_sample[l,2]
}

View(Springs_Data_sample)
hist(Springs_Data_sample[,2])
skewness(Springs_Data_sample[,2], na.rm=FALSE)

####################################################################

#Adding salaries to the customers
Springs_Data_sample[1:4157,3]=sample(c(32000:210000), size = 4157, replace = TRUE)
hist(Springs_Data_sample$Customer_Income)
View(Springs_Data_sample)

####################################################################

#Skeweing Salaries 
salaryskew=Springs_Data_sample[sample(1:nrow(Springs_Data_sample), size = 1800, replace = FALSE),3]
salaryskew_condition=salaryskew[salaryskew<75000]
length(salaryskew)
length(salaryskew_condition)


for(n in 1:length(salaryskew_condition))
{
  Springs_Data_sample[n,2]=round(rnorm(1, mean = 27, sd = 2))
}


for(o in 1:nrow(Springs_Data_sample))
{
  if(Springs_Data_sample[o,3]<69483)
  {
    Springs_Data_sample[o,3]=round(rnorm(1, mean = 100000, sd = 5000))
  }
  else if(Springs_Data_sample[o,2]>139567)
  {
    Springs_Data_sample[o,3]=round(rnorm(1, mean = 125000, sd = 8000))
  }
  else
    Springs_Data_sample[o,3]=Springs_Data_sample[o,3]
}
View(Springs_Data_sample)
hist(Springs_Data_sample[,3])
skewness(Springs_Data_sample[,3], na.rm=FALSE)

####################################################################

#Creating another dataframe with the required number of rows
data_to_merge=data.frame(matrix(nrow = 18578, ncol = 1))
colnames(data_to_merge)=c("Customer_ID")
data_to_merge[,1]=sample(Springs_Data_sample[1:4157,1], size = 18578, replace = TRUE)

####################################################################

View(data_to_merge)
View(Springs_Data_sample)

####################################################################

#Merging the two data frames to final Springs_Data
Springs_Data_09092017=merge(data_to_merge,Springs_Data_sample, by="Customer_ID", all.x = FALSE)
View(Springs_Data_09092017)
mean(Springs_Data_09092017$Customer_Age, na.rm = TRUE)
sd(Springs_Data_09092017$Customer_Age, na.rm = TRUE)
mean(Springs_Data_09092017$Customer_Income, na.rm = TRUE)
sd(Springs_Data_09092017$Customer_Income, na.rm = TRUE)

####################################################################

#Rounding off and correcting Ages and Salaries
Springs_Data_09092017$Customer_Age=round(Springs_Data_09092017$Customer_Age)
View(Springs_Data_09092017)
Springs_Data_09092017$Customer_Income=round(Springs_Data_09092017$Customer_Income)
View(Springs_Data_09092017)

####################################################################

#Plotting Age and Salaries
plot(Springs_Data_09092017$Customer_Age,Springs_Data_09092017$Customer_Income)

####################################################################

#Generating Customer Categories based on Income
for(k in 1:nrow(Springs_Data_09092017))
{
  if(Springs_Data_09092017[k,3] > 30000 & Springs_Data_09092017[k,3] < 75000 )
  {
    Springs_Data_09092017[k,4]="Low Income Customer"
  } 
  else if(Springs_Data_09092017[k,3] >= 75001 & Springs_Data_09092017[k,3] < 135000)
  {
    Springs_Data_09092017[k,4]="Medium Income Customer"
  } 
  else if(Springs_Data_09092017[k,3] >= 135000)
  {
    Springs_Data_09092017[k,4]="High Income Customer"
  } 
  else { 
    Springs_Data_09092017[k,4]="Very Low Income Customer"
  }
}
View(Springs_Data_09092017)

###################################################################

#Generating data for amount_charged
services_prices=c(330,440,550,660,1000,1100,1300,1540,1520,2240,1970,2780,2600,3770,3230,4320,2510,3320,3340,4310,4420,5390,5400,6290)
services_probabilities= c(0.0570,0.141,0.094,0.0436,0.032,0.112,0.033,0.011,0.021,0.026,0.099,0.098,0.0151,0.013,0.005,0.008,0.012,0.019,0.075,0.026,0.0074,0.029,0.014,0.0089)
Springs_Data_09092017$Amount_Paid=sample(services_prices, size = 18578, replace = TRUE, prob = services_probabilities)
View(Springs_Data_09092017)
hist(Springs_Data_09092017$Amount_Paid)

###################################################################

#Generating data for Car size
for(i in 1:nrow(Springs_Data_09092017))
{
  if(Springs_Data_09092017[i,7]==330 |
     Springs_Data_09092017[i,7]==1000 | 
     Springs_Data_09092017[i,7]==1520 |
     Springs_Data_09092017[i,7]==2240 |
     Springs_Data_09092017[i,7]==2510 |
     Springs_Data_09092017[i,7]==3320)
  {
    Springs_Data_09092017[i,5]="Small"      
  }
  else if(Springs_Data_09092017[i,7]==440 | 
          Springs_Data_09092017[i,7]==1100 | 
          Springs_Data_09092017[i,7]==1970 |
          Springs_Data_09092017[i,7]==2780 |
          Springs_Data_09092017[i,7]==3340 |
          Springs_Data_09092017[i,7]==4310)
  {
    Springs_Data_09092017[i,5]="Medium"
  }
  else if(Springs_Data_09092017[i,7]==550 | 
          Springs_Data_09092017[i,7]==1300 | 
          Springs_Data_09092017[i,7]==2600 |
          Springs_Data_09092017[i,7]==3770 |
          Springs_Data_09092017[i,7]==4420 |
          Springs_Data_09092017[i,7]==5390)
  {
    Springs_Data_09092017[i,5]="Large"
  }
  else if(Springs_Data_09092017[i,7]==660 | 
          Springs_Data_09092017[i,7]==1540 | 
          Springs_Data_09092017[i,7]==3230 |
          Springs_Data_09092017[i,7]==4320 |
          Springs_Data_09092017[i,7]==5400 |
          Springs_Data_09092017[i,7]==6290) 
  {
    Springs_Data_09092017[i,5]="Extra Large"
  }
  
}
View(Springs_Data_09092017)

####################################################################


#Generating data for Service Provided
for(j in 1:nrow(Springs_Data_09092017))
{
  if(Springs_Data_09092017[j,7]==330 |
     Springs_Data_09092017[j,7]==440 | 
     Springs_Data_09092017[j,7]==550 |
     Springs_Data_09092017[j,7]==660 )
  {
    Springs_Data_09092017[j,6]="Wash"      
  }
  else if(Springs_Data_09092017[j,7]==1000 | 
          Springs_Data_09092017[j,7]==1100 | 
          Springs_Data_09092017[j,7]==1300 |
          Springs_Data_09092017[j,7]==1540 )
  {
    Springs_Data_09092017[j,6]="Wash and Wax"
  }
  else if(Springs_Data_09092017[j,7]==1520 | 
          Springs_Data_09092017[j,7]==1970 | 
          Springs_Data_09092017[j,7]==2600 |
          Springs_Data_09092017[j,7]==3230)
  {
    Springs_Data_09092017[j,6]="Interior Basic"
  }
  else if(Springs_Data_09092017[j,7]==2240 | 
          Springs_Data_09092017[j,7]==2780 | 
          Springs_Data_09092017[j,7]==3770 |
          Springs_Data_09092017[j,7]==4320 ) 
  {
    Springs_Data_09092017[j,6]="Interior Advanced"
  }
  else if(Springs_Data_09092017[j,7]==2510 | 
          Springs_Data_09092017[j,7]==3340 | 
          Springs_Data_09092017[j,7]==4420 |
          Springs_Data_09092017[j,7]==5400 ) 
  {
    Springs_Data_09092017[j,6]="Exterior Basic"
  }
  else if(Springs_Data_09092017[j,7]==3320 | 
          Springs_Data_09092017[j,7]==4310 | 
          Springs_Data_09092017[j,7]==5390 |
          Springs_Data_09092017[j,7]==6290 ) 
  {
    Springs_Data_09092017[j,6]="Exterior Advanced"
  }
  
}
View(Springs_Data_09092017)


####################################################################

#Adding Payment_Type
Springs_Data_09092017$Payment_Type=sample(c("Card","Cash","Cheque"), size = 18578, replace = TRUE, prob = c(0.51,0.43,0.06))
View(Springs_Data_09092017)

####################################################################

#Writing it to an excel spreadsheet
library("xlsx")
write.xlsx(Springs_Data_09092017, "D:/Springs_Car_Care_Data_09092016.xlsx")

####################################################################
####################################################################

